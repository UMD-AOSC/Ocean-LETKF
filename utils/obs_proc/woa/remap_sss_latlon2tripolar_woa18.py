#!/usr/bin/env python3

import argparse
import os, sys
import numpy as np
import xesmf as xe
from netCDF4 import Dataset

def parseCommandLine():
    parser = argparse.ArgumentParser(description=("Generate regrid weight file by xesmf"))
    parser.add_argument("output_restore_template_file", help=(
                "path of output sss restore file"))
    parser.add_argument("--regridder_file_path", required=True, help=(
                "path to store the regridder file generated by xesmf"))
    parser.add_argument("--wet_grid_path", required=True, help=(
                "path of land/ocean mask file for MOM6"))
    parser.add_argument("--target_grid_path",required=True, help=(
                "path of the target grid file (e.g., MOM6)"))
    parser.add_argument("--source_grid_path", required=True, help=(
                "path of the source grid file (e.g., WOA18)"))
    parser.add_argument("--sss_filled_path", required=True, help=(
                    "path of the source grid file (e.g., WOA18)"))

    args = parser.parse_args()
    print(args)
    return args

def main(args):
    #
    # create regridder info
    #

    # read in output tripolar lon, lat
    f = Dataset(args.target_grid_path)
    lat2d_grd_out = f.variables['lat'][:]
    lon2d_grd_out = f.variables['lon'][:]
    f.close()

    print("lat2d_grd_out: shape, min, max=",lat2d_grd_out.shape, np.min(lat2d_grd_out), np.max(lat2d_grd_out))
    print("lon2d_grd_out: shape, min, max=",lon2d_grd_out.shape, np.min(lon2d_grd_out), np.max(lon2d_grd_out))

    # read in tripolar land/ocean mask (ocean: wet==1)
    f = Dataset(args.wet_grid_path)
    wet2d_grd_out = f.variables['wet'][:]
    f.close()

    print("wet2d_grd_out: shape, min, max=", wet2d_grd_out.shape, np.min(wet2d_grd_out), np.max(wet2d_grd_out))

    # read in the input lon, lat
    f = Dataset(args.source_grid_path)
    lat1d_grd_in = f.variables['lat'][:]
    lon1d_grd_in = f.variables['lon'][:]
    f.close()

    print("lat1d_grd_in: shape, min, max=",lat1d_grd_in.shape, np.min(lat1d_grd_in), np.max(lat1d_grd_in))
    print("lon1d_grd_in: shape, min, max=",lon1d_grd_in.shape, np.min(lon1d_grd_in), np.max(lon1d_grd_in))

    # generate the regridder 
    grd_in = {"lon": lon1d_grd_in, "lat": lat1d_grd_in}  
    grd_out = {"lon": lon2d_grd_out, "lat": lat2d_grd_out}
    interp_method = "bilinear"
    periodic = True
    fn_regridder_in = os.path.abspath(args.regridder_file_path)
    regridder = xe.Regridder(grd_in, grd_out, interp_method, weights=fn_regridder_in, periodic=periodic)
    #regridder.filename = fn_regridder_in  # a bug of xesmf 
    print(regridder)

    #
    # load SSS_filled file
    #
    f = Dataset(args.sss_filled_path)
    sss_filled = f.variables['SALT'][:]
    print("shape(sss_filled)=",sss_filled.shape, np.min(sss_filled), np.max(sss_filled))
    f.close()

    sss_filled[sss_filled.mask] = np.nan
    sss_filled.mask = False
    sss_filled.fill_value = 0

    #
    # interpolate SSS from latlon to tripolar grids
    #
    remapped_sss_filled = np.zeros((sss_filled.shape[0],lat2d_grd_out.shape[0],lat2d_grd_out.shape[1]))
    for i in range(sss_filled.shape[0]):
        wk2d = regridder(sss_filled[i,:,:])
        print("remapped: i, min, max=", i, np.min(wk2d), np.max(wk2d))
        if np.sum( np.isnan(wk2d) & (wet2d_grd_out>0.5)) != 0:
            raise Exception("Have NaN in remapped tripolar grids over ocean when filling remapped_sss_filled[{},:,:]".format(i))
            sys.exit(3)
        remapped_sss_filled[i,:,:] = wk2d.copy()

    #
    # update SSS to the output
    #
    f = Dataset(args.output_restore_template_file,"r+")
    grds_ocn = wet2d_grd_out > 0.5 # ocean grids
    f.variables['SALT'][:] = remapped_sss_filled
    f.close() 
    print("Update SSS in the template file:", args.output_restore_template_file)

    return None

if __name__ == '__main__':
    args = parseCommandLine()
    main(args)

