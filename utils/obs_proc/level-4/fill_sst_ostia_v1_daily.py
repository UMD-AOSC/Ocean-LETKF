#!/usr/bin/env python3
import argparse
import os, sys
import numpy as np
from netCDF4 import Dataset
import xesmf as xe
from regrid_tools import iterative_fill_POP_core

def parseCommandLine():
    
    parser = argparse.ArgumentParser(description=(""))
    parser.add_argument("--regridder_file_path", required=True, help=(
                "path to store the regridder file generated by xesmf"))
    parser.add_argument("--wet_grid_path", required=True, help=(
                "path of land/ocean mask file for MOM6 (e.g., ocean_topog.nc)"))
    parser.add_argument("--target_grid_path",required=True, help=(
                "path of the target grid file (e.g., MOM6)"))
    parser.add_argument("--source_grid_path", required=True, help=(
                "path of the source grid file (e.g., OSTIA)"))
    parser.add_argument("--sst_unfilled_path",required=True,type=str,help=(
                "original L4 SST data"))
    parser.add_argument("--remapped_file_path", required=True, type=str, help=(
                "output SST remapped to MOM6 tripolar grids"))

    args =parser.parse_args()
    print(args)
    return args

def write_nc_file(fnout, lat1d_l4sst, lon1d_l4sst, lat2d_mom, lon2d_mom, \
                    sst_unfilled, sst_filled, sst_remapped_mom, wet_mom):
    print("write out netcdf file: {}".format(fnout))
    if os.path.exists(fnout):
        raise Exception("fnout already exists at: {}".format(fnout))
        sys.exit(2)

    fnout = os.path.abspath(fnout)
    f = Dataset(fnout, mode='w', format='NETCDF4_CLASSIC')
    f.createDimension('lat_l4sst', lat1d_l4sst.size)
    f.createDimension('lon_l4sst', lon1d_l4sst.size)
    nlat_mom, nlon_mom = lat2d_mom.shape
    f.createDimension('lat_mom', nlat_mom)
    f.createDimension('lon_mom', nlon_mom)

    lat1d_l4sst_to_file = f.createVariable('lat1d_l4sst',np.float32, ('lat_l4sst',))
    lon1d_l4sst_to_file = f.createVariable('lon1d_l4sst',np.float32, ('lon_l4sst',))
    lat2d_mom_to_file = f.createVariable('lat2d_mom',np.float32, ('lat_mom','lon_mom'))
    lon2d_mom_to_file = f.createVariable('lon2d_mom',np.float32, ('lat_mom','lon_mom'))

    unfill_to_file    = f.createVariable('sst_unfilled',    np.float32, ('lat_l4sst','lon_l4sst'))
    filled_to_file = f.createVariable('sst_filled',np.float32, ('lat_l4sst','lon_l4sst'))
    remapped_to_file  = f.createVariable('sst_remapped_mom',np.float32, ('lat_mom','lon_mom'))
    wet_to_file       = f.createVariable('wet',             np.float32, ('lat_mom','lon_mom'))

    lat1d_l4sst_to_file[:] = lat1d_l4sst
    lon1d_l4sst_to_file[:] = lon1d_l4sst
    lat2d_mom_to_file[:]   = lat2d_mom
    lon2d_mom_to_file[:]   = lon2d_mom

    unfill_to_file[:]   = sst_unfilled
    filled_to_file[:]   = sst_filled
    remapped_to_file[:] = sst_remapped_mom
    wet_to_file[:]      = wet_mom

    f.close()


def main(args):
    #
    # create the regridder info
    #
    print("="*80+"\ncreate the regridder info\n"+"-"*80)

    # read in output tripolar lon, lat
    f = Dataset(args.target_grid_path)
    lat2d_grd_out = f.variables['lat'][:]
    lon2d_grd_out = f.variables['lon'][:]
    f.close()
    print("lat2d_grd_out: shape, min, max=",lat2d_grd_out.shape, np.min(lat2d_grd_out), np.max(lat2d_grd_out))
    print("lon2d_grd_out: shape, min, max=",lon2d_grd_out.shape, np.min(lon2d_grd_out), np.max(lon2d_grd_out))

    # read in tripolar land/ocean mask (ocean: wet=1)
    f = Dataset(args.wet_grid_path)
    wet2d_grd_out = f.variables['wet'][:]
    f.close()
    print("wet2d_grd_out: shape, min, max=", wet2d_grd_out.shape, np.min(wet2d_grd_out), np.max(wet2d_grd_out))

    # read in the input lon, lat
    f = Dataset(args.source_grid_path)
    lat1d_grd_in = f.variables['lat'][:]
    lon1d_grd_in = f.variables['lon'][:]
    f.close()
    print("lat1d_grd_in: shape, min, max=",lat1d_grd_in.shape, np.min(lat1d_grd_in), np.max(lat1d_grd_in))
    print("lon1d_grd_in: shape, min, max=",lon1d_grd_in.shape, np.min(lon1d_grd_in), np.max(lon1d_grd_in))

    # read in the regridder
    grd_in = {"lon": lon1d_grd_in, "lat": lat1d_grd_in}
    grd_out = {"lon": lon2d_grd_out, "lat": lat2d_grd_out}
    interp_method = "bilinear"
    periodic = True
    fn_regridder_in = os.path.abspath(args.regridder_file_path)
    regridder = xe.Regridder(grd_in, grd_out, interp_method, weights=fn_regridder_in, periodic=periodic)
    regridder.filename = fn_regridder_in  # a bug of xesmf
    print(regridder)

    #
    # read in unmapped SST
    #
    print("="*80+"\nflood the land\n"+"-"*80)

    f = Dataset(args.sst_unfilled_path, 'r')
    sst_unfilled = np.squeeze( f["analysed_sst"][:] )
    f.close()

    #
    # flood the globle
    #   
    wk2d = sst_unfilled.data
    missing_value = sst_unfilled.fill_value
    fillmask = sst_unfilled.mask
    iterative_fill_POP_core(var=wk2d, fillmask=fillmask, missing_value=missing_value, tol=1.e-4, ltripole=False, nitermax=1000)
    sst_filled  = wk2d.copy()

    #
    # interp from uniform latlon to mom tripolar
    #
    print("="*80+"\ninterpolate to MOM tripolar grids\n"+"-"*80)

    
    print("BEFORE remapped (global): min, max=", np.min(wk2d), np.max(wk2d))
    print("remap SST from latlon to mom tripolar")
    sst_remapped = regridder(wk2d)
    print("AFTER remapped (global): min, max=", np.min(sst_remapped), np.max(sst_remapped))
    print("AFTER remapped (ocean): min, max=", np.min(sst_remapped[wet2d_grd_out>0.5]), np.max(sst_remapped[wet2d_grd_out>0.5]))
    n_pts_missing = np.sum( np.isnan(sst_remapped) & (wet2d_grd_out>0.5))
    print("n_pts_missing=",n_pts_missing)
    if n_pts_missing != 0:
        raise Exception("Have {} NaN in remapped tripolar grids over ocean when interpolating to tripolar grids".format(n_pts_missing))
        sys.exit(3)

    sst_remapped -= 273.15
    print("AFTER K->degC (global): min, max=", np.min(sst_remapped), np.max(sst_remapped))
    print("AFTER K->degC (ocean): min, max=", np.min(sst_remapped[wet2d_grd_out>0.5]), np.max(sst_remapped[wet2d_grd_out>0.5]))

    #
    # write out the daily original/filled/remapped sst
    #
    print("="*80+"\nwrite out\n"+"-"*80)

    write_nc_file(args.remapped_file_path, lat1d_grd_in, lon1d_grd_in, lat2d_grd_out, lon2d_grd_out, \
                  sst_unfilled, sst_filled, sst_remapped, wet2d_grd_out)

if __name__ == '__main__':
    args = parseCommandLine()
    main(args)
